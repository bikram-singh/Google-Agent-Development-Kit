import os
import google.auth
from dotenv import load_dotenv
from google.cloud.securitycenter_v2 import SecurityCenterClient
from google.adk.agents import Agent
from google.adk.tools import FunctionTool
import csv
import pandas as pd

load_dotenv()

def extract_resource_type(resource_path: str) -> str:
    """Extracts the resource type from a full resource path."""
    try:
        parts = resource_path.split("/")
        if "instances" in parts:
            return "GCE Instance"
        elif "buckets" in parts:
            return "Cloud Storage Bucket"
        elif "functions" in parts:
            return "Cloud Function"
        elif "projects" in parts:
            return "Project"
        return "Other"
    except Exception:
        return "Unknown"

def list_findings() -> str:
    """Lists security findings for a GCP organization using SCC v2 and saves them to CSV and Excel."""
    organization_id = os.getenv("ORGANIZATION_ID")
    if not organization_id:
        return "Environment variable ORGANIZATION_ID is not set."

    credentials, _ = google.auth.default()
    client = SecurityCenterClient(credentials=credentials)

    parent = f"organizations/{organization_id}/sources/-"
    response = client.list_findings(request={"parent": parent})

    findings = []
    for finding_result in response:
        finding = finding_result.finding
        resource_path = finding.resource_name
        resource_type = extract_resource_type(resource_path)

        findings.append({
            "Name": finding.name,
            "Category": finding.category,
            "Severity": finding.severity,
            "Resource Display Name": resource_path.split("/")[-1] if resource_path else "N/A",
            "Resource Path": resource_path,
            "Resource Type": resource_type
        })

    if not findings:
        return f"No findings found for organization '{organization_id}'."

    # Save to CSV
    csv_file = "findings.csv"
    with open(csv_file, "w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["Name", "Category", "Severity", "Resource Display Name", "Resource Path", "Resource Type"])
        writer.writeheader()
        writer.writerows(findings)

    # Save to Excel
    xlsx_file = "findings.xlsx"
    df = pd.DataFrame(findings)
    df.to_excel(xlsx_file, index=False)

    # Return clean output as a string
    formatted = "\n".join(
        f"{i+1}. Category: {item['Category']:<30} | Severity: {item['Severity']} | Resource: {item['Resource Display Name']}"
        for i, item in enumerate(findings)
    )

    return f"Findings ({len(findings)} total):\n\n{formatted}\n\nSaved to:\n- {csv_file}\n- {xlsx_file}"

list_findings_tool = FunctionTool(list_findings)

root_agent = Agent(
    name="gcp_vulnerability_agent",
    model="gemini-1.5-pro",
    instruction=(
        "You are a Google Cloud Security Analyst AI Agent. Your job is to list "
        "Security Command Center (SCC) findings across an organization using GCP's SCC v2 API. "
        "When the user requests findings, directly output the full list returned by the list_findings tool. "
        "Do not summarize or rephrase. Return the exact output to the user, and also mention that the data is saved "
        "as CSV and XLSX files for convenience."
    ),
    description="An agent that lists GCP SCC v2 findings and saves them to CSV and Excel.",
    tools=[list_findings_tool],
)

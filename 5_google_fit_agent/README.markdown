# Google Fit Agent

This project provides a Python-based agent (`google_fit_agent`) to interact with the Google Fit API, specifically to fetch aggregated daily step count data for a specified time range. The agent uses OAuth 2.0 for authentication and is built with the Google API client libraries.

## Table of Contents
- [Prerequisites](#prerequisites)
- [Setup](#setup)
  - [Step 1: Create a Google Cloud Project](#step-1-create-a-google-cloud-project)
  - [Step 2: Enable Google Fit API](#step-2-enable-google-fit-api)
  - [Step 3: Configure OAuth Consent Screen](#step-3-configure-oauth-consent-screen)
  - [Step 4: Create OAuth 2.0 Credentials](#step-4-create-oauth-20-credentials)
  - [Step 5: Set Up Environment](#step-5-set-up-environment)
  - [Step 6: Authenticate](#step-6-authenticate)
- [Usage](#usage)
- [Project Structure](#project-structure)
- [Troubleshooting](#troubleshooting)
- [Security Notes](#security-notes)

## Prerequisites
- Python 3.7 or higher
- A Google account for Google Cloud Console access
- Internet access for API calls and package installation
- A text editor or IDE (e.g., VS Code, PyCharm)

## Setup

### Step 1: Create a Google Cloud Project
1. Go to the [Google Cloud Console](https://console.cloud.google.com).
2. Click the project dropdown and select **New Project**.
3. Name your project (e.g., "Google Fit Agent") and click **Create**.

### Step 2: Enable Google Fit API
1. In the project dashboard, navigate to **APIs & Services** > **Library**.
2. Search for **Google Fit REST API**.
3. Click **Enable** to activate the API.

### Step 3: Configure OAuth Consent Screen
1. Go to **APIs & Services** > **OAuth consent screen**.
2. Select **External** as the user type and click **Create**.
3. Fill in:
   - **App name**: e.g., "Google Fit Agent"
   - **User support email**: Your Gmail address
   - **Developer contact information**: Your Gmail address
4. Add the following scopes:
   - `https://www.googleapis.com/auth/fitness.activity.read`
   - `https://www.googleapis.com/auth/fitness.activity.write`
   - `https://www.googleapis.com/auth/fitness.location.read`
   - `https://www.googleapis.com/auth/fitness.location.write`
5. Add your Gmail address as a test user.
6. Save and continue through the remaining steps.

### Step 4: Create OAuth 2.0 Credentials
1. Navigate to **APIs & Services** > **Credentials**.
2. Click **Create Credentials** > **OAuth client ID**.
3. Choose **Desktop App** or **Web Application**.
4. If selecting **Web Application**, set the redirect URI to `http://localhost:8090`.
5. Click **Create** and note the **Client ID** and **Client Secret**, or download the JSON file.

### Step 5: Set Up Environment
1. Clone or create the project directory.
2. Install dependencies by creating a `requirements.txt` file with:
   ```text
   google-auth
   google-auth-oauthlib
   google-auth-httplib2
   requests
   python-dotenv
   google-adk
   pandas
   ```
   Run:
   ```bash
   pip install -r requirements.txt
   ```
3. Create a `.env` file in the project root with your credentials:
   ```text
   CLIENT_ID=Your_Client_ID
   CLIENT_SECRET=Your_Client_Secret
   REDIRECT_URI=http://localhost:8090
   SCOPES=https://www.googleapis.com/auth/fitness.activity.read https://www.googleapis.com/auth/fitness.activity.write https://www.googleapis.com/auth/fitness.location.read https://www.googleapis.com/auth/fitness.location.write
   GOOGLE_API_KEY=Your_Google_API_Key
   ```

### Step 6: Authenticate
1. Run the `auth_helper.py` script to authenticate:
   ```bash
   python auth_helper.py
   ```
2. Follow the printed URL, authenticate in your browser, and paste the authorization code back into the terminal.
3. This generates a `token.json` file in the `5_google_fit_agent` directory.

## Usage
1. Ensure the `token.json` file exists in the `5_google_fit_agent` directory.
2. Import and use the agent in a Python script:
   ```python
   from agent import agent

   inputs = {
       "startTimeMillis": "1696118400000",  # e.g., Oct 1, 2023
       "endTimeMillis": "1696204800000"     # e.g., Oct 2, 2023
   }
   result = agent.tools[0](inputs)
   print(result)
   ```
3. The `fetch_google_fit_steps` function returns aggregated daily step count data or an error message if the request fails.

## Project Structure
```
google_fit_agent/
├── .env
├── requirements.txt
├── auth_helper.py
├── agent.py
└── 5_google_fit_agent/
    └── token.json
```

- **`.env`**: Stores OAuth credentials and API key.
- **`requirements.txt`**: Lists Python dependencies.
- **`auth_helper.py`**: Handles OAuth 2.0 authentication and generates `token.json`.
- **`agent.py`**: Defines the `google_fit_agent` and the `fetch_google_fit_steps` tool.
- **`token.json`**: Stores OAuth tokens (generated by `auth_helper.py`).

## Troubleshooting
- **Token file not found**: Run `auth_helper.py` to generate `token.json`.
- **API request failure**: Verify `token.json` is valid and scopes match the OAuth consent screen.
- **Missing dependencies**: Re-run `pip install -r requirements.txt`.
- **Invalid credentials**: Ensure `CLIENT_ID`, `CLIENT_SECRET`, and `REDIRECT_URI` in `.env` match those in the Google Cloud Console.

## Security Notes
- Keep `.env` and `token.json` files secure and do not share them publicly.
- Use the **External** user type for testing to restrict access to test users only.
- Regularly review and update credentials in the Google Cloud Console.